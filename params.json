{"name":"10c-blog1","tagline":"","body":"# Introduction\r\n\r\n![*Yeah, well, that's just like your opinon, man.*](http://www.teslamotorsclub.com/attachment.php?attachmentid=47346&d=1397707694)\r\n\r\nI love expressing my opinion about everything and then having a healthy\r\ndiscussion about it, this article will be no different.\r\n\r\nRight now i simply don't have enough knowledge about React and forgot too much\r\nabout Dojo to make it objective analysis of the problem.\r\n\r\n## What is the purpose of this article?\r\n\r\nAt some point i learned that [React][react] is just the View part of MVC and\r\nshould not obstruct with the M & C. I toyed with the idea of using it\r\nwith/instead of Dijit to make Dojo more accessible to the general public.\r\n\r\nWell... the day finally came to put the idea into action.\r\n\r\nI have no experience whatsoever with React or modern (2015+) web development\r\nideas so today i will stick to explaining pros & cons of Dojo as i know it,\r\nwhy would i even want to do such thing as mixing it with React\r\nand finally share my proof of concept.\r\n\r\nI am planning to follow up with my own implementation of [Today i Learned][TIL]\r\nidea and share my experiences in future articles.\r\n\r\nSo far i have managed to make an in-browser [`.jsx` loader][dojo-jsx] for Dojo,\r\nsadly i came to conclusion it is not very useful outside development.\r\nYou can check the progress [here][tilapp], i abandoned the idea of using above\r\nmentioned loader for [Jetbrains's Babel File Watcher][jetbrains-babel] as it\r\nis way less obtrusive and simpler to set up that any other JSX transpiler.\r\n\r\n## Who am i?\r\n\r\nCurrently i am a full stack developer at 10Clouds slowly changing into strictly\r\nPython developer since nobody wants to use my beloved Dojo. Hopefully this\r\n*series* of articles and release of Dojo 2 will change the situation.\r\n\r\nI had a pleasure (or misery) of learning Dojo as my first JavaScript library.\r\nI used it in a side project for almost a year and i definitely liked what i\r\nfound. However it was not a land flowing with milk an honey - it has very high\r\nlearning curve. It is simply not possible to make a quick start guide for it,\r\ntook me 2 weeks to even begin writing my Single Page Application.\r\n\r\nIn retrospective i think the vast knowledge of ES5 standard i obtained using\r\nDojo was well worth the effort.\r\n\r\n\r\n# What exactly is [Dojo Toolkit][dojo]?\r\n\r\nYou may or may not have heard about it before. It is one of the\r\n[oldest][dojo-history] JavaScript libraries out there and a pioneer of\r\nthe JavaScript itself as we know it today. It might be getting old and\r\nis notoriously hard to get started with, but i still think it is one of the best\r\nwritten and the most complete JavaScript libraries there are.\r\n\r\n## Library, not a framework\r\n\r\nI can't stress it enough, **Toolkit** is the keyword here. You can't really\r\ncompare it to `AngularJS` or `Backbone.js` as they are whole frameworks. If you\r\nreally want to compare it to something look at `Underscore.js` or `jQuery`.\r\n\r\nPutting it another way comparing Dojo to Angular is like comparing the car\r\nworkshop to the full blown car factory. The former lets you do anything you\r\ncould imagine while the latter lets you do stuff only in the way it was\r\ndesigned to, but *a lot* faster.\r\n\r\n## Dojo's structure\r\n\r\nDojo is split into 3 official modules:\r\n- `dojo` - core of the library, you can build pretty much anything with it,\r\n- `dijit` - most of the User Interface related code lives here,\r\n- `dojox` - community contributions not deemed stable enough to be pulled into\r\n    `dijit` or `dojo`, still it is very useful,\r\n\r\nI also know of 3 *future* modules which will be incorporated into Dojo 2\r\nrelease:\r\n- [`dstore`][dstore] - replaces `dojo/store`,\r\n    the Data Storage implementation of Dojo,\r\n- [`dmodel`][dmodel] - originally part of `dstore`,\r\n    the Data Modelling part of Dojo,\r\n- [`dgrid`][dgrid] - Dojo's grid implementation, call it whatever you want:\r\n    i absolutely love it for displaying tabular data/extending it with whatever\r\n    feature i might dream of,\r\n\r\n## It lets you do whatever you want, however you want...\r\n\r\nDojo makes an art of not being opinionated about anything as opposed to\r\nAngular which is as opinionated about everything as they get. Start with\r\nAngular, you can hardly add anything else.\r\n\r\nTo some (including me) it is Dojo's greatest feature...\r\n\r\n### ...but for the most it is Dojo's downfall\r\n\r\nDojo has all the bolts and screws you would need in frontend development and\r\nstill nobody tells you how they fit together. Figuring it out by yourself is the\r\nhardest and most disgusting part of Dojo.\r\n\r\n## Random games comparisons\r\nDojo is to Angular what:\r\n- [Defense of the Ancients][dota] is to [League of Legends][lol],\r\n- Counter Strike is to Quake/Team Fortress 2,\r\n- Call of Duty/Battlefield to Quake/Team Fortress 2,\r\n- Starcraft is to Warcraft 3,\r\n\r\nObviously the latter are more fun and easy to work with, but the former give you\r\nthe power, the feeling of hard earned achievement and confidence that once you\r\ngot the hang of it it will *simply work*.\r\n\r\n## Dojo 2\r\n\r\nIn recent years it started falling behind the frantically developing JavaScript\r\nworld pending a full rewrite in form of [Dojo 2][dojo2]. I had a pleasure to use\r\nsome of the new modules ([`dstore`][dstore] and [`dgrid`][dgrid]) in their\r\ninfancy and i sincerely hope that the rewrite will give it entirely new life.\r\n\r\n\r\n# Why React?\r\n\r\nSome people love Dijit, i am not one of them. While stock implementation is\r\na lot closer to Angular in terms of opinionation and ease of use, the Dijit's\r\ncore [`_WidgetBase`][widgetbase] is way more complicated to use than it should\r\nbe. It's kind of like Java: well defined and structured, but requires a lot of\r\nboilerplate code.\r\n\r\nBasically Dijit lacks easy to use templating system while it is React's JSX's\r\ngreatest feature. Simple as that.\r\n\r\n# Proof of concept\r\n\r\nGreat, you are still here. So let's get to the proof of concept example.\r\n[You can see the fully working comparison of React vs Dijit here][example].\r\n\r\n## What are we doing?\r\n\r\nI tried something more ambitious, but my lack of knowledge of React told me\r\n\r\n![You shall not pass!](http://i.stack.imgur.com/2BvbQ.jpg)\r\n\r\nSo here we are: displaying unordered list of titles and getting the personalized\r\n`alert()` upon clicking them.\r\n\r\nAs i mentioned earlier, i used PyCharm's File Watcher to convert `.jsx` to `ES5`\r\nusing Babel serving it with `gulp-serve`, that's all the setup i needed.\r\n\r\n## Issues and insights worth mentioning\r\n- [`AMD`][modules] is subset of Dojo's AMD implementation, Dojo had them\r\n    long before it became standard and has extra loaders that didn't make it\r\n    into the final standard, so it is kind of like a `square` is a `rectangle`,\r\n    but not the other way around,\r\n- Dojo's inheritance model is incompatible with JavaScript strict mode, but\r\n    otherwise should work fine with ES2015 transpilers,\r\n- personally i did not figure out how to circumvent automatic inclusion of\r\n    `'use strict';` in Babel for just the Dojo files, so i stick to the ES5,\r\n\r\n## [`index.html`](http://nazarewk.github.io/10c-blog1/demo/index.html)\r\n\r\nDumbed down version of `index.html`:\r\n\r\n```html\r\n<html>\r\n<head>\r\n    <!-- head boilerplate code, including pure.css and some basic styling -->\r\n</head>\r\n<body>\r\n<!-- We'll use Pure's 50-50 vertical grid -->\r\n<div class=\"pure-g\">\r\n    <div class=\"pure-u-1-2\" id=\"react\">\r\n        <!-- We'll inject react code here -->\r\n    </div>\r\n    <div class=\"pure-u-1-2\" id=\"dijit\">\r\n        <!-- We'll inject dijit widget here -->\r\n    </div>\r\n</div>\r\n<script>\r\n    /*\r\n        We need to kickstart the dojo with specific configuration,\r\n        you can find more info here:\r\n        https://dojotoolkit.org/documentation/tutorials/1.10/hello_dojo/index.html\r\n        https://dojotoolkit.org/documentation/tutorials/1.10/dojo_config/index.html\r\n     */\r\n    var dojoConfig = {\r\n        async: true,\r\n        baseUrl: '',\r\n        packages: [{\r\n            name: 'dojo',\r\n            location: '//ajax.googleapis.com/ajax/libs/dojo/1.10.4/dojo'\r\n            // point `dojo` package to google CDN\r\n        }, {\r\n            name: 'dijit',\r\n            location: '//ajax.googleapis.com/ajax/libs/dojo/1.10.4/dijit'\r\n            // point `dijit` package to google CDN\r\n        }, {\r\n            name: 'app',\r\n            location: 'app'\r\n        }],\r\n        /*\r\n        Kickstart the app with `app/main` module right after dojo loads using\r\n        `deps`\r\n        */\r\n        deps: [\r\n            'app/main'\r\n        ]\r\n    };\r\n</script>\r\n<!--\r\nReact and ReactDOM variables are required for transpiled JSX to work\r\nwe can either include react globally or require it in every single AMD module\r\nObviously the former is easier to use\r\n-->\r\n<script src=\"//fb.me/react-0.14.7.js\"></script>\r\n<script src=\"//fb.me/react-dom-0.14.7.js\"></script>\r\n<script src=\"//ajax.googleapis.com/ajax/libs/dojo/1.10.4/dojo/dojo.js\" defer></script>\r\n</body>\r\n</html>\r\n```\r\n\r\n## The entry point ([`main.jsx`](http://nazarewk.github.io/10c-blog1/demo/app/main.jsx))\r\n\r\n```javascript\r\ndefine([\r\n  'dojo/dom',\r\n  './ReactEntryList',\r\n  './dijit/EntryList'\r\n], (dom, ReactEntryList, dijitEntryList) => {\r\n  // Generate 5 entries\r\n  let entries = [1, 2, 3, 4, 5].map((i) => ({\r\n    title: `Title ${i}`,\r\n    onClick: () => alert(`Message ${i}`)\r\n  }));\r\n\r\n  // Render them with React\r\n  ReactDOM.render(\r\n    <ReactEntryList entries={entries}/>,\r\n    dom.byId('react')\r\n  );\r\n\r\n  // Render them with Dijit's custom widget\r\n  var widget = new dijitEntryList({item: entries});\r\n  widget.placeAt(dom.byId('dijit'));\r\n  widget.startup(); // this is crucial\r\n});\r\n```\r\n\r\n## Custom Dijit widget code:\r\n\r\nYeah, creating custom Dijit widget **is** cumbersome.\r\n\r\n### [`EntryList.js`](http://nazarewk.github.io/10c-blog1/demo/app/dijit/EntryList.js)\r\n\r\n```javascript\r\ndefine([\r\n  'dojo/_base/declare',\r\n  'dijit/_WidgetBase',\r\n  'dojo/dom-construct',\r\n  'dojo/on',\r\n  './Entry'\r\n], function (declare, _WidgetBase, domConstruct, on, Entry) {\r\n  return declare([_WidgetBase], {\r\n    constructor: function constructor() {\r\n      this.inherited(arguments);\r\n      // Instantiate the variable inside constructor, because it is\r\n      // object-specific, not class-specific\r\n      this.entries = [];\r\n    },\r\n\r\n    buildRendering: function buildRendering() {\r\n      // This is where the DOM tree is built in dijit\r\n\r\n      // this.domNode is a <div> created higher in inheritance hierarchy\r\n      this.inherited(arguments);\r\n\r\n      // Build the preface the proper dojo's domConstruct way\r\n      domConstruct.create('h1', {\r\n        innerHTML: 'Dojo + Dijit version'\r\n      }, this.domNode);\r\n      domConstruct.create('p', {\r\n        innerHTML: 'Click to display alert'\r\n      }, this.domNode);\r\n\r\n      this.listNode = domConstruct.create('ul', {}, this.domNode);\r\n\r\n      // Build the files list from HTML text\r\n      var files = '\\\r\n        <h2>Files list:</h2>\\\r\n        <ul> \\\r\n          <li><a href=\"app/main.jsx\">app/main.jsx</a></li> \\\r\n          <li><a href=\"app/dijit/Entry.js\">app/dijit/Entry.js</a></li> \\\r\n          <li><a href=\"app/dijit/EntryList.js\">app/dijit/EntryList.js</a></li> \\\r\n        </ul>';\r\n      domConstruct.place(\r\n        domConstruct.toDom(files), // contruct DOM from text\r\n        this.domNode\r\n      );\r\n    },\r\n\r\n    postCreate: function postCreate() {\r\n      // We have to manually create child widgets, then destroy them later\r\n\r\n      // It could be located at buildRendering(), but i prefer to build widgets\r\n      // in postCreate()\r\n      this.inherited(arguments);\r\n      var that = this;\r\n      that.entries = that.item.map(function (entry) {\r\n        return new Entry({item: entry}).placeAt(that.listNode);\r\n      });\r\n    },\r\n\r\n    destroy: function destroy() {\r\n      // We have to manually destroy child widgets to avoid memory leaks\r\n      this.inherited(arguments);\r\n      this.entries.forEach(function (entry) {\r\n        entry.destroy();\r\n      })\r\n    }\r\n  });\r\n});\r\n```\r\n\r\n### [`Entry.js`](http://nazarewk.github.io/10c-blog1/demo/app/dijit/Entry.js)\r\n\r\n```javascript\r\ndefine([\r\n  'dojo/_base/declare',\r\n  'dijit/_WidgetBase',\r\n  'dojo/dom-construct',\r\n  'dojo/on'\r\n], function (declare, _WidgetBase, domConstruct, on) {\r\n  return declare([_WidgetBase], {\r\n\r\n    buildRendering: function buildRendering() {\r\n      // Normally this.domNode is a div created in super() call\r\n      // this.inherited(arguments) in dojo's inheritance model\r\n      // we'll skip it and create <li> instead\r\n      this.domNode = domConstruct.create('li', {\r\n        innerHTML: this.item.title\r\n      });\r\n    },\r\n\r\n    postCreate: function postCreate() {\r\n      this.inherited(arguments);\r\n      this.signal = on(this.domNode, 'click', this.item.onClick);\r\n    },\r\n\r\n    destroy: function destroy() {\r\n      this.signal.remove();\r\n      this.inherited(arguments);\r\n    }\r\n  });\r\n});\r\n```\r\n\r\n## [`ReactEntry.jsx`](http://nazarewk.github.io/10c-blog1/demo/app/ReactEntryList.jsx)\r\nYeah exactly, this's all there is:\r\n\r\n```javascript\r\ndefine([], () => {\r\n  const Entry = ({entry}) => (\r\n    <li onClick={entry.onClick}>\r\n      {entry.title}\r\n    </li>\r\n  );\r\n\r\n  return (props) => (\r\n    <div>\r\n      <h1>Dojo + React version</h1>\r\n      <p>Click to display alert</p>\r\n      <ul>\r\n        {props.entries.map((entry, i) => (\r\n          <Entry entry={entry} key={i}/>\r\n        ))}\r\n      </ul>\r\n      <h2>Files list:</h2>\r\n      <ul>\r\n        <li><a href=\"app/main.jsx\">app/main.jsx</a></li>\r\n        <li><a href=\"app/ReactEntryList.jsx\">app/ReactEntryList.jsx</a></li>\r\n      </ul>\r\n    </div>\r\n  );\r\n});\r\n```\r\n\r\n# Conclusions\r\n\r\nI am not sure how it will work out in my [Today i Learned app][tilapp], but\r\nfor now using React instead of custom Dijit looks very promising in solving\r\nthe problem of Dojo being too complicated for the average mortal.\r\n\r\nHopefully i will keep you posted in the follow-ups and possibly my\r\nEngineer/Bachelor Thesis (whatever is the proper name in English).\r\n\r\n\r\n[TIL]: https://github.com/jbranchaud/til\r\n[tilapp]: https://github.com/nazarewk/tilapp\r\n\r\n[dojo-jsx]: https://github.com/nazarewk/dojo-jsx\r\n[dojo]: https://dojotoolkit.org/\r\n[dojo-history]: https://en.wikipedia.org/wiki/Dojo_Toolkit#Release_history\r\n[dojo2]: https://dojotoolkit.org/community/roadmap/\r\n[dgrid]: http://dgrid.io/\r\n[dstore]: http://dstorejs.io/\r\n[dmodel]: https://github.com/SitePen/dmodel\r\n[widgetbase]: https://dojotoolkit.org/documentation/tutorials/1.10/understanding_widgetbase/index.html\r\n\r\n[example]: http://nazarewk.github.io/10c-blog1/demo/\r\n\r\n[react]: https://facebook.github.io/react/\r\n[jetbrains-babel]: http://blog.jetbrains.com/webstorm/2015/05/ecmascript-6-in-webstorm-transpiling/\r\n[modules]: https://medium.com/@brianleroux/es6-modules-amd-and-commonjs-c1acefbe6fc0#.ic17udaoc\r\n\r\n[dota]: http://blog.dota2.com/?l=english\r\n[lol]: http://leagueoflegends.com","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}